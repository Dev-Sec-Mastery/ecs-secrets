// Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/awslabs/ecs-secrets/modules/kms/client (interfaces: Client)

package mock_client

import (
	kms "github.com/aws/aws-sdk-go/service/kms"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) CreateAlias(_param0 *kms.CreateAliasInput) (*kms.CreateAliasOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateAlias", _param0)
	ret0, _ := ret[0].(*kms.CreateAliasOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) CreateAlias(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAlias", arg0)
}

func (_m *MockClient) Decrypt(_param0 *kms.DecryptInput) (*kms.DecryptOutput, error) {
	ret := _m.ctrl.Call(_m, "Decrypt", _param0)
	ret0, _ := ret[0].(*kms.DecryptOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) Decrypt(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Decrypt", arg0)
}

func (_m *MockClient) GenerateDataKey(_param0 *kms.GenerateDataKeyInput) (*kms.GenerateDataKeyOutput, error) {
	ret := _m.ctrl.Call(_m, "GenerateDataKey", _param0)
	ret0, _ := ret[0].(*kms.GenerateDataKeyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) GenerateDataKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GenerateDataKey", arg0)
}
