// Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/awslabs/ecs-secrets/modules/crypt (interfaces: Crypter)

package mock_crypt

import (
	dao "github.com/awslabs/ecs-secrets/modules/dao"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Crypter interface
type MockCrypter struct {
	ctrl     *gomock.Controller
	recorder *_MockCrypterRecorder
}

// Recorder for MockCrypter (not exported)
type _MockCrypterRecorder struct {
	mock *MockCrypter
}

func NewMockCrypter(ctrl *gomock.Controller) *MockCrypter {
	mock := &MockCrypter{ctrl: ctrl}
	mock.recorder = &_MockCrypterRecorder{mock}
	return mock
}

func (_m *MockCrypter) EXPECT() *_MockCrypterRecorder {
	return _m.recorder
}

func (_m *MockCrypter) DecryptSecret(_param0 *dao.SecretRecord) (*string, error) {
	ret := _m.ctrl.Call(_m, "DecryptSecret", _param0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCrypterRecorder) DecryptSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptSecret", arg0)
}

func (_m *MockCrypter) EncryptSecret(_param0 *dao.SecretRecord, _param1 string) (*dao.SecretRecord, error) {
	ret := _m.ctrl.Call(_m, "EncryptSecret", _param0, _param1)
	ret0, _ := ret[0].(*dao.SecretRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCrypterRecorder) EncryptSecret(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptSecret", arg0, arg1)
}
